(function () {

	/**
	 * Dynamic model generated by object field's definition:
	 * 	Ex.
	 * 		configurationObject: {
	 * 			{Object} data: {
	 * 				key: value,
	 * 				...
	 * 			},
	 * 			{Object} dataTypes: {
	 * 				attributeName: dataType,
	 * 				...
	 * 			}
	 * 		}
	 */
	Ext.define('CMDBuild.model.common.attributes.Generic', {
		extend: 'Ext.data.Model',

		fields:[],

		/**
		 * @param {Object} configurationObject
		 * @param {Object} configurationObject.dataTypes
		 * @param {Object} configurationObject.data
		 *
		 * @returns {Void}
		 *
		 * @override
		 */
		constructor: function (configurationObject) {
			if (
				Ext.isObject(configurationObject)
				&& !Ext.isEmpty(configurationObject.data)
				&& !Ext.isEmpty(configurationObject.dataTypes)
			) {
				configurationObject.data = Ext.isEmpty(configurationObject.data) ? {} : configurationObject.data;

				if (!Ext.isEmpty(configurationObject.dataTypes) && Ext.isObject(configurationObject.dataTypes)) {
					var modelFieldsDefinition = [];

					Ext.Object.each(configurationObject.dataTypes, function (fieldName, type, myself) {
						type = type.toLowerCase();

						switch (type) {
							case 'boolean': {
								modelFieldsDefinition.push({ name: fieldName, type: 'boolean' });
							} break;

							case 'date': {
								modelFieldsDefinition.push({ name: fieldName, type: 'date' });
							} break;

							case 'decimal':
							case 'double': {
								modelFieldsDefinition.push({ name: fieldName, type: 'float', useNull: true });
							} break;

							case 'lookup':
							case 'reference':
							case 'integer': {
								modelFieldsDefinition.push({ name: fieldName, type: 'int', useNull: true });
							} break;

							default: {
								modelFieldsDefinition.push({ name: fieldName, type: 'string' });
							}
						}
					}, this);

					this.self.setFields(modelFieldsDefinition);
				} else { // Plain model
					this.self.setFields(Ext.Object.getKeys(configurationObject.data));
				}
			}

			this.callParent([configurationObject.data]);
		},

		/**
		 * Override to get real data values because of a strange behaviour that for multiple model instances on getData returns only fields that where setup on last instance
		 *
		 * @returns {Object}
		 *
		 * @override
		 */
		getData: function () {
			return this.data;
		}
	});

})();
